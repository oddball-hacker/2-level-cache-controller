module cache_controller (
input clk, mode,
input [8-1:0] data_in,
input [32-1:0] address,
output reg Wait, hit1, hit2,
output reg [8-1:0] data_out );

parameter no_of_bits_per_line = 32;
parameter byte_size = 8;
parameter address_size = 32;
parameter blk_offset = 2;
parameter L2_latency = 2;
parameter Main_mem_latency = 10;
parameter L1_tag_size = 26;
parameter L1_index_size = 4;
parameter L2_tag_size = 25;
parameter L2_index_size = 5;
parameter L1_cache_no_of_ways = 2;
parameter L2_cache_no_of_ways = 4;
parameter read = 0;
parameter write = 1;
integer i, j;

reg [address_size-1:0] stored_address;
reg [byte_size-1:0] stored_data_in;
reg stored_mode;

wire [L1_index_size-1:0] L1_index;
wire [byte_size-1:0] L1_inp_data, L1_out_data;
wire [L1_tag_size-1:0] L1_new_tag, L1_existing_tag;
wire L1_new_LRU, L1_LRU, L1_tag_locator, L1_valid, L1_dirty;
L1_cache L1_instance ( L1_index, L1_tag_locator, L1_inp_data, L1_new_tag, L1_new_LRU, L1_out_data, 
L1_existing_tag, L1_LRU, L1_valid, L1_dirty );

//Assigning indexes and tags to caches and main memory
assign mem_address = (stored_address>>2) % 11'd1024;
assign L1_index = mem_address % 5'd16;
assign L1_tag = mem_address >> 3'd4;
assign L1_tag_locator = i;

always @ (posedge clk) begin

if ( reset ) begin
stored_address <= 0;
stored_data_in <= 0;
stored_mode <= 0;
Wait <= 0;
hit1 <= 0;
hit2 <= 0;
data_out <= 0;
end
else if ( Wait == 1'b0 ) begin
   stored_address <= address;
	stored_data_in <= data_in;
   stored_mode <= mode;
	if ( mode == read ) begin
	   for ( i=0; i<L1_cache_no_of_ways; i=i+1 ) begin
		   if ( L1_valid & ( L1_tag == L1_existing_tag ) ) begin
			   hit1 <= 1'b1;
				data_out <= L1_out_data;
			end
		end
	end
end
end

endmodule
		   
		   
